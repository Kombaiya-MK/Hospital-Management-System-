// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserAPI.Models;

#nullable disable

namespace UserAPI.Migrations
{
    [DbContext(typeof(HospitalContext))]
    [Migration("20230630111155_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("UserAPI.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<byte[]>("HashKey")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserAPI.Models.UserDetails", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marital_Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.ToTable("UserDetails");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserDetails");
                });

            modelBuilder.Entity("UserAPI.Models.Doctor", b =>
                {
                    b.HasBaseType("UserAPI.Models.UserDetails");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserDetailsEmail")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Doctor_UserDetailsEmail");

                    b.HasIndex("UserDetailsEmail");

                    b.HasDiscriminator().HasValue("Doctor");
                });

            modelBuilder.Entity("UserAPI.Models.Patient", b =>
                {
                    b.HasBaseType("UserAPI.Models.UserDetails");

                    b.Property<string>("EmergencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserDetailsEmail")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("UserDetailsEmail");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("UserAPI.Models.UserDetails", b =>
                {
                    b.HasOne("UserAPI.Models.User", "User")
                        .WithOne("UserDetails")
                        .HasForeignKey("UserAPI.Models.UserDetails", "Email")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserAPI.Models.Doctor", b =>
                {
                    b.HasOne("UserAPI.Models.UserDetails", "UserDetails")
                        .WithMany("doctor")
                        .HasForeignKey("UserDetailsEmail");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("UserAPI.Models.Patient", b =>
                {
                    b.HasOne("UserAPI.Models.UserDetails", "UserDetails")
                        .WithMany("Patient")
                        .HasForeignKey("UserDetailsEmail");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("UserAPI.Models.User", b =>
                {
                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("UserAPI.Models.UserDetails", b =>
                {
                    b.Navigation("Patient");

                    b.Navigation("doctor");
                });
#pragma warning restore 612, 618
        }
    }
}
